#################
# Functions
#################

function cdlast {
   last="$(cat ~/.cache/zsh/dirs | fzf)"
   cd "$last"
}

rc() {
    if [ $# = 0 ]; then
        action=list-units
    else
        action="$1"
        shift
    fi
    case "$action" in
        l|lu) action=list-units ;;
        ls) action=list-sockets ;;
    esac
    case "$action" in
        list*|status|show|-*)
            systemctl "$action" "$@"
            ;;
        log)
            if ! [ $# = 1 ]; then
                echo "Only 1 argument supported to 'log' for now." 1>&2
                return 1
            else
                sudo journalctl -u "$1"
            fi
            ;;
        *)
            sudo systemctl "$action" "$@"
            ;;
    esac
}


# fd --cd to selected directory
function fd() {
   local dir
   dir=$(find ${1:-.} -path '*/\.*' -prune \
               -o -type d -print 2> /dev/null | fzf +m) &&
   cd "$dir"
}

# fda - including hidden directories
function fda() {
   local dir
   dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# fdr - cd to selected parent directory
fdr() {
  local declare dirs=()
  get_parent_dirs() {
    if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
    if [[ "${1}" == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo $_dir; done
    else
      get_parent_dirs $(dirname "$1")
    fi
  }
  local DIR=$(get_parent_dirs $(realpath "${1:-$PWD}") | fzf-tmux --tac)
  cd "$DIR"
}


# cf - fuzzy cd from anywhere
# ex: cf word1 word2 ... (even part of a file name)
# zsh autoload function
cf() {
  local file

  file="$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1)"

  if [[ -n $file ]]
  then
     if [[ -d $file ]]
     then
        cd -- $file
     else
        cd -- ${file:h}
     fi
  fi
}

function fmpc() {
  local song_position
  song_position=$(mpc -f "%position%) %artist% - %title%" playlist | \
    fzf-tmux --query="$1" --reverse --select-1 --exit-0 | \
    sed -n 's/^\([0-9]\+\)).*/\1/p') || return 1
  [ -n "$song_position" ] && mpc -q play $song_position
}

